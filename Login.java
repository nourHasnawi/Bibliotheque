import java.awt.Component;
import java.sql.*;
import java.util.Properties;
import java.util.Scanner;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author aymen
 */
public class Login extends javax.swing.JFrame {
    
    public static user utilisateur = null;
    /**
     * Creates new form Login
     */
    Connection con;
    public Login() {
        initComponents();
        String url = "jdbc:mysql://localhost:3306/javaproject";
        String user="root";
        String password="W@2915djkq#$$2";
        try{
           con = DriverManager.getConnection(url,user,password);
        }
        catch(SQLException e){
            System.out.println(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inputmail = new javax.swing.JTextField();
        inputpwd = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        boutounInscription = new javax.swing.JButton();
        seconnecter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel1.setText("E-mail :");

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel2.setText("Mot de passe :");

        inputpwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputpwdActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel3.setText("Vous n'avez pas un compte?");

        boutounInscription.setBackground(new java.awt.Color(102, 204, 0));
        boutounInscription.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        boutounInscription.setForeground(new java.awt.Color(255, 255, 255));
        boutounInscription.setText("S'inscrire");
        boutounInscription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutounInscriptionActionPerformed(evt);
            }
        });

        seconnecter.setBackground(new java.awt.Color(0, 153, 255));
        seconnecter.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        seconnecter.setForeground(new java.awt.Color(255, 255, 255));
        seconnecter.setText("Se connecter");
        seconnecter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seconnecterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(441, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(8, 8, 8)
                        .addComponent(boutounInscription, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(inputmail, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(inputpwd, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(seconnecter, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)))
                .addGap(439, 439, 439))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {inputmail, inputpwd});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(250, 250, 250)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inputpwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(seconnecter, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(boutounInscription))
                .addContainerGap(251, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {inputmail, inputpwd});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void seconnecterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seconnecterActionPerformed
        String email = inputmail.getText();
        String pwd= inputpwd.getText(); 
        sauthentifier s = new sauthentifier();
        Component frame = null;
        utilisateur = s.authentification(email, pwd);
        if(utilisateur!=null){
            if((utilisateur.getRole()).equals("Etudiant") || (utilisateur.getRole()).equals("Enseignant")){
                setVisible(false);
                new EmprunteurFrame().setVisible(true);
            }
        
            else if(utilisateur.getRole().equals("bibliothecaire")){
            setVisible(false);
            Login.utilisateur.updateSystem(con);
            new bibliothecaireFrame().setVisible(true);}
            
            else if (inputmail.getText().equals("Admin")&&inputpwd.getText().equals("Admin")){
            new AdminInterface().setVisible(true);
        }}
        else{
            JOptionPane.showMessageDialog(frame, "E-mail ou mot de passe incorrecte(s). Veuillez v√©rifier vos information.");
        }
    }//GEN-LAST:event_seconnecterActionPerformed

    private void inputpwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputpwdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputpwdActionPerformed

    private void boutounInscriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutounInscriptionActionPerformed
        new SignUpFrame().setVisible(true);
    }//GEN-LAST:event_boutounInscriptionActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boutounInscription;
    private javax.swing.JTextField inputmail;
    private javax.swing.JPasswordField inputpwd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton seconnecter;
    // End of variables declaration//GEN-END:variables
}

class user {
    private int id_utilisateur;
    private String nom, prenom, login, pwd, role;

    public int getId_utilisateur() {
        return id_utilisateur;
    }

    public void setId_utilisateur(int id_utilisateur) {
        this.id_utilisateur = id_utilisateur;
    }

    public String getNom() {
        return nom;
    }

    public void setNom(String nom) {
        this.nom = nom;
    }

    public String getPrenom() {
        return prenom;
    }

    public void setPrenom(String prenom) {
        this.prenom = prenom;
    }

    public String getLogin() {
        return login;
    }

    public void setLogin(String login) {
        this.login = login;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public user(int id_utilisateur, String nom, String prenom, String login, String pwd, String role) {
        this.id_utilisateur = id_utilisateur;
        this.nom = nom;
        this.prenom = prenom;
        this.login = login;
        this.pwd = pwd;
        this.role = role;
    }

    public user(int id_utilisateur, String nom, String prenom, String role) {
        this.id_utilisateur = id_utilisateur;
        this.nom = nom;
        this.prenom = prenom;
        this.role = role;
    }

    public void afficheLivresPlusEmpruntes(){

    };

    public void emprunter(int v, Connection con){

    };

    public void rechercheLivre() {
    }

    public void afficheMenu(){

    };

    public void afficherEmprunteursAssidus(){

    };

    void reserver_livre(int id_livre) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    void retourner_livre(int id_livre, Connection con) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    void annulerReservation(int id_livre) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    void AfficherHistoriqueEmpruntsReservations() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    void notifier_retardataires(Connection con) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    void supprimerLivre(int id_livre, Connection con) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    void ajouterLivre(String titre, String auteur, String genre, int disponibilite, Connection con) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    void updateSystem(Connection con) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    void reserver(int id_livre, Connection con) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
    
}

class sauthentifier {

    final static String url = "jdbc:mysql://localhost:3306/javaproject";
    final static String user = "root";
    final static String password = "W@2915djkq#$$2";

    public user authentification(String login, String pwd) {
        try (Connection connection = DriverManager.getConnection(url, user, password)) {
            String str = "SELECT * FROM Utilisateur WHERE login = ? AND pwd = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(str)) {
                preparedStatement.setString(1, login);
                preparedStatement.setString(2, pwd);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        // Utilisateur trouv√© dans la base de donn√©es
                        int id_utlisateur = resultSet.getInt("id_utilisateur");
                        String nom = resultSet.getString("nom");
                        String prenom = resultSet.getString("prenom");
                        String role = resultSet.getString("_role");

                        return createUser(id_utlisateur,nom,prenom,role);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;}

        private user createUser(int id_utilisateur, String nom,String prenom,String role) {

            if ("admin".equals(role)) {
                return new bibliothecaire(id_utilisateur,nom,prenom,role);
            } else if ("bibliothecaire".equals(role)) {
                return new bibliothecaire(id_utilisateur,nom,prenom,role);
            } else if ("Enseignant".equals(role)||"Etudiant".equals(role)) {
                return new Emprunteur(id_utilisateur,nom,prenom,role);
            }
            return null; // Gestion d'un r√¥le inconnu (peut-√™tre lancer une exception)
        }

    /*public static void main(String[] args) {
        sauthentifier cnx = new sauthentifier();
        Scanner input = new Scanner(System.in);
        // Exemple d'authentification
        System.out.println("Bienvenue !");
        System.out.println("Entrez votre adresse email :");
        String adresse = "mariem.bousaid@esen.tn";
        System.out.println("Entrez votre mot de passe:");
        String mdp = "prof123";

        user utilisateur = cnx.authentification(adresse, mdp);
        if (utilisateur != null) {
            String role = utilisateur.getRole();
            System.out.println("Authentification r√©ussie en tant que " + role);
            System.out.println("Bonjour,"+utilisateur.getPrenom()+"!");
        } else {
            System.out.println("Authentification √©chou√©e. Veuillez v√©rifier vos informations.");
        }

        if(utilisateur.getRole().equals("bibliothecaire")){
            System.out.println("sbah");
            utilisateur.afficherEmprunteursAssidus();
            System.out.println("el khir");
            utilisateur.afficheLivresPlusEmpruntes();
        }
        else{
            utilisateur.emprunter(204, con);
        }


        input.close();
    }*/
}

class sendmail {
        final static String username = "fst.utm.bibliotheque2023@gmail.com"; 
        final static String password = "Yd0QSzTIUnREgZs3"; 

    static void envoiemail(String nom, String prenom, String email) {
        
        
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp-relay.brevo.com"); 
        props.put("mail.smtp.port", "587"); 

        
        Session session = Session.getInstance(props,
                new javax.mail.Authenticator() {
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(username, password);
                    }
                });
        
        try {
            
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(username));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));
            message.setSubject("Rappel de retour pour un emprunt en retard.");
            message.setText("Cher(e) "+prenom+" "+nom+",\n\nBonjour,\n\n"+
                    "    Nous esp√©rons que ce message vous trouve bien. Nous voulons vous rappeler que vous avez un emprunt effectu√© qui est actuellement en retard.\n\n"+
                    "    Nous comprenons que parfois, les impr√©vus peuvent survenir. Cependant, nous vous encourageons √† retourner le livre d√®s que possible pour √©viter des frais de retard suppl√©mentaires. Si vous avez d√©j√† restitu√© le livre, nous vous prions de ne pas tenir compte de ce message.\n\n"+
                    "   Merci de votre compr√©hension et de votre coop√©ration.\n\nCordialement,\n\n\nL'√©quipe de la biblioth√®que au sein de la Facult√© des Sciences de Tunis.");

            // Send the message
            Transport.send(message);

        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }
    
    static void notifier_reserveur( String email,String nom, String prenom,String livre,String date) {
        
        
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp-relay.brevo.com"); 
        props.put("mail.smtp.port", "587"); 

        
        Session session = Session.getInstance(props,
                new javax.mail.Authenticator() {
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(username, password);
                    }
                });
        
        try {
            
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(username));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));
            message.setSubject("Bonne nouvelle !");
            message.setText("Cher(e) "+prenom+" "+nom+",\n\nBonjour,\n\n"+
                    "    Nous esp√©rons que ce message vous trouve bien. Nous voulons vous informer que le livre "+livre+" que vous avez r√©serv√© le"+date+" est maintenant √† votre disposition.\n\n"+
                    "    Nous vous invitons √† emprunter le livre au sein de la F.S.T dans 48h sinon votre r√©servation sera annul√©e. Si vous avez d√©j√† emprunt√© le livre, nous vous prions de ne pas tenir compte de ce message.\n\n"+
                    "   Merci de votre temps inestimable.\n\nCordialement,\n\n\n\nL'√©quipe de la biblioth√®que au sein de la Facult√© des Sciences de Tunis.");

            // Send the message
            Transport.send(message);

        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }

    static void code(String email,int code) {
        
        
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp-relay.brevo.com"); 
        props.put("mail.smtp.port", "587"); 

        
        Session session = Session.getInstance(props,
                new javax.mail.Authenticator() {
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(username, password);
                    }
                });
        
        try {
            
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(username));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));
            message.setSubject("Activez votre compte");
            message.setText("Bonjour, \n\nVotre code confidentiel : "+code);

            // Send the message
            Transport.send(message);

        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }
    
}

class bibliothecaire extends user {
        public int id_utilisateur;
        public String nom, prenom, login, pwd, _role;
        final static String url = "jdbc:mysql://localhost:3306/javaproject";
        final static String user="root";
        final static String password="W@2915djkq#$$2";

        public bibliothecaire(int id_utilisateur,String nom,String prenom,String login,String pwd,String _role){
              super(id_utilisateur,nom,prenom,login,pwd,_role);
        }

    public bibliothecaire(int id_utilisateur, String nom, String prenom, String _role) {
        super(id_utilisateur, nom, prenom, _role);
    }

    /*public static void ajouter_livre(Livre L){
            Connection con = null;
            try{
            con = DriverManager.getConnection(url,user,password);
            String requete = "insert into Livre values(?,?,?,?,?)";
            PreparedStatement stmt = con.prepareStatement(requete);
            stmt.setInt(1, L.getId_livre());
            stmt.setString(2, L.getTitre());
            stmt.setString(3, L.getAuteur());
            stmt.setString(4, L.getGenre());
            stmt.setInt(5, L.getDisponibilite());
            stmt.executeUpdate();
            System.out.println("Livre ajout√© avec succ√®s!");}
            catch(Exception e){
                System.out.println(e);
            }
            finally {
                try {
                    if (con != null) {
                        con.close();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        };*/

        /*public static void supprimer_livre(){
            Connection con = null;
            try{
                con = DriverManager.getConnection(url,user,password);
                String requete = "delete from Livre where id_livre = ?";
                PreparedStatement stmt = con.prepareStatement(requete);
                stmt.setInt(1,L.getId_livre());
                stmt.executeUpdate();
                System.out.println("Livre supprim√© avec succ√®s!");}
            catch(Exception e){
                System.out.println(e);
            }
            finally {
                try {
                    if (con != null) {
                        con.close();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        };*/

        /*public void afficheMenu(){
            while(true){
                Scanner input=new Scanner(System.in);

            System.out.println("Veuillez entrer le num√©ro votre choix:\n" +
                    "1:Gestion des livres.\n"+
                    "2:Gestion des emprunteurs.\n"+
                    "3:Envoi d'une notification par e-mail pour un rappel de retour.\n"+
                    "4:G√©n√©ration des rapports statiques.\n"+
                    "5:D√©connection");
                int choix = input.nextInt();
                switch (choix){
                    case 1:
                        System.out.println("Veuillez entrer le num√©ro votre choix:\n"+
                                "1:Ajouter un livre.\n"+
                                "2:Supprimer un livre."+
                                "3:Retour au menu principal");
                        int choix2= input.nextInt();
                        switch (choix2){
                            case 1:
                                ajouter_livre();
                                break;
                            case 2:
                                supprimer_livre();
                                break;
                            case 3:
                                afficheMenu();
                                break;
                            default:
                                System.out.println("Choix invalide.");
                                break;
                        }
                    case 2:
                        System.out.println("Veuillez entrer le num√©ro votre choix:\n"+
                                "1:Ajouter un livre.\n"+
                                "2:Supprimer un livre."+
                                "3:Retour au menu principal");
                        int choix2= input.nextInt();
                        switch (choix2) {
                            case 1:
                                ajouter_emprunteur();
                                break;
                            case 2:
                                supprimer_emprunteur();
                                break;
                            case 3:
                                afficheMenu();
                                break;
                            default:
                                System.out.println("Choix invalide.");
                                break;
                        }
                    case 3:
                        sendmail.envoiemail();
                        break;
                    case 4:
                        top_assidu();
                        top_emprunte();
                        break;
                    case 5:
                        try{
                        return;
                     }
                        finally {

                        }

            if(choix==5){
                break;
            }}
            }
*/
    public void ajouterLivre(String titre,String auteur,String genre, int disponibilite,Connection con){
        String sql = "Insert into livre(titre,auteur,genre,disponibilite) values('"+titre+"','"+auteur+"','"+genre+"',"+disponibilite+")";
        JFrame frame = null;
        try{
            PreparedStatement stmt = con.prepareStatement(sql);
            int res = stmt.executeUpdate();
            if(res>0){
                JOptionPane.showMessageDialog(frame,"Livre ajout√© avec succ√®s !");
            }
            else{
                JOptionPane.showMessageDialog(frame,"Erreur lors de l'ajout de livre. V√©rifiez les don√©es et r√©essayez.");
            }
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    
    
    public void supprimerLivre(int id_livre,Connection con){
        String sql = "Delete from livre where id_livre = ?";
        JFrame frame = null;
        try{
            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setInt(1, id_livre);
            int res = stmt.executeUpdate();
            if(res>0){
                JOptionPane.showMessageDialog(frame,"Le livre dont l'identifiant est "+id_livre+" a √©t√© supprim√© avec succ√®s.");
            }
            else{
                JOptionPane.showMessageDialog(frame,"Aucun livre trouv√© avec l'identifiant "+id_livre+". \nAucune supression effectu√©e.");
            }
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    
    public void afficherEmprunteursAssidus() {
        try {
            Connection con = DriverManager.getConnection(sauthentifier.url,sauthentifier.user,sauthentifier.password);
            String sql = "SELECT nom, prenom, COUNT(id_emprunt) AS emprunts_realises " +
                    "FROM utilisateur u " +
                    "JOIN emprunt e ON u.id_utilisateur = e.id_utilisateur " +
                    "GROUP BY u.id_utilisateur " +
                    "ORDER BY emprunts_realises DESC";
            PreparedStatement statement = con.prepareStatement(sql);
            ResultSet resultSet = statement.executeQuery();

            System.out.println("Emprunteurs les plus assidus :");
            int ranking = 1;
            while (resultSet.next()) {
                String nom = resultSet.getString("nom");
                String prenom = resultSet.getString("prenom");
                System.out.println(ranking + ". " + nom + " " + prenom);
                ranking++;
            }

            // Close the resources after usage
            resultSet.close();
            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately (logging, throwing, etc.)
        }
    }
    
    public void updateSystem(Connection con) {
    annulerReservationsEnAttente(con);
    mettreEnRetardEmprunts(con);
}

private void annulerReservationsEnAttente(Connection con) {
    PreparedStatement annulerReservationStatement = null;
    try {
        String annulerReservationSql = "UPDATE reservation SET statut = 'Annul√©e' " +
                                       "WHERE statut = 'En attente de confirmation' AND TIMESTAMPDIFF(DAY, date_reservation, NOW()) > 2";
        annulerReservationStatement = con.prepareStatement(annulerReservationSql);
        int reservationsAnnulees = annulerReservationStatement.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
        // Handle the exception appropriately (logging, throwing, etc.)
    } finally {
        try {
            if (annulerReservationStatement != null) {
                annulerReservationStatement.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately (logging, throwing, etc.)
        }
    }
}

private void mettreEnRetardEmprunts(Connection con) {
    PreparedStatement mettreEnRetardStatement = null;
    try {
        String mettreEnRetardSql = "UPDATE emprunt SET statut = 'En retard' WHERE statut = 'En cours' AND date_retour < CURDATE()";
        mettreEnRetardStatement = con.prepareStatement(mettreEnRetardSql);
        int empruntsEnRetard = mettreEnRetardStatement.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
        // Handle the exception appropriately (logging, throwing, etc.)
    } finally {
        try {
            if (mettreEnRetardStatement != null) {
                mettreEnRetardStatement.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately (logging, throwing, etc.)
        }
    }
}


    public void afficheLivresPlusEmpruntes(){
        try {
            Connection con = DriverManager.getConnection(sauthentifier.url,sauthentifier.user,sauthentifier.password);
            String sql = "SELECT titre, auteur, COUNT(id_emprunt) AS emprunts_total " +
                    "FROM livre l " +
                    "JOIN emprunt e ON l.id_livre = e.id_livre " +
                    "GROUP BY l.id_livre " +
                    "ORDER BY emprunts_total DESC";
            PreparedStatement statement = con.prepareStatement(sql);
            ResultSet resultSet = statement.executeQuery();

            System.out.println("Livres les plus emprunt√©s :");
            int ranking = 1;
            while (resultSet.next()) {
                String titre = resultSet.getString("titre");
                String auteur = resultSet.getString("auteur");
                System.out.println(ranking + ". " + titre + " par " + auteur);
                ranking++;
            }

            // Close the resources after usage
            resultSet.close();
            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately (logging, throwing, etc.)
        }
    };
    
    public void update_emprunt(Connection c){
        String sql = "Update emprunt set statut = 'En retard' where date_retour>now() and statut ='En cours'";
        try{
        PreparedStatement stmt = c.prepareStatement(sql);
        int miseajour = stmt.executeUpdate();
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    
    public void notifier_retardataires(Connection c){
        String sql = "Select nom,prenom,login from utilisateur where id_utilisateur in (select id_utilisateur from emprunt where utilisateur.id_utilisateur=emprunt.id_utilisateur and statut='En retard')";
        try{
            Statement stmt = c.createStatement();
            ResultSet res = stmt.executeQuery(sql);
            while(res.next()){
                String nom = res.getString(1);
                String prenom = res.getString(2);
                String email = res.getString(3);
                sendmail.envoiemail(nom,prenom,email);
            }
            JFrame frame = null;
            JOptionPane.showMessageDialog(frame,"Retardataires notifi√©s.");
        }
        catch(Exception e){
            System.out.println(e);
        }
    }

        public void supprimer_emprunteur(){

            };



        public void envoie_mail(int x){
        };

        public void emprunt(){};
        
        

    }

class Emprunteur extends user {

    public Emprunteur(int id_utilisateur, String nom, String prenom, String login, String pwd, String role) {
        super(id_utilisateur, nom, prenom, login, pwd, role);
    }

    public Emprunteur(int id_utilisateur, String nom, String prenom, String role) {
        super(id_utilisateur, nom, prenom, role);
    }
    
    public void emprunter(int id_livre, Connection con) {
    PreparedStatement checkEmpruntStatement = null;
    ResultSet empruntResult = null;
    PreparedStatement checkReservationStatement = null;
    ResultSet reservationResult = null;
    PreparedStatement checkAvailabilityStatement = null;
    ResultSet availabilityResult = null;
    PreparedStatement empruntStatement = null;
    JFrame frame = null;

    try {
        // V√©rifier le nombre d'emprunts en cours ou en retard pour l'utilisateur
        String checkEmpruntSql = "SELECT COUNT(*) FROM Emprunt WHERE id_utilisateur = ? AND statut in ('En cours','En retard')";
        checkEmpruntStatement = con.prepareStatement(checkEmpruntSql);
        checkEmpruntStatement.setInt(1, Login.utilisateur.getId_utilisateur());
        empruntResult = checkEmpruntStatement.executeQuery();

        if (empruntResult.next() && empruntResult.getInt(1) == 0) {
            // L'utilisateur n'a pas d'emprunt en cours ou en retard; v√©rifier les r√©servations
            String checkReservationSql = "SELECT COUNT(*) FROM reservation WHERE id_livre = ? AND id_utilisateur != ? and (statut = 'En attente de confirmation' or statut ='En attente')";
            checkReservationStatement = con.prepareStatement(checkReservationSql);
            checkReservationStatement.setInt(1, id_livre);
            checkReservationStatement.setInt(2, Login.utilisateur.getId_utilisateur());
            reservationResult = checkReservationStatement.executeQuery();
            

            if (reservationResult.next() && reservationResult.getInt(1) == 0) {
                // Aucune r√©servation en attente de confirmation; v√©rifier la disponibilit√© du livre
                String checkAvailabilitySql = "SELECT disponibilite FROM livre WHERE id_livre = ?";
                checkAvailabilityStatement = con.prepareStatement(checkAvailabilitySql);
                checkAvailabilityStatement.setInt(1, id_livre);
                availabilityResult = checkAvailabilityStatement.executeQuery();

                if (availabilityResult.next()) {
                    int disponibilite = availabilityResult.getInt("disponibilite");

                    if (disponibilite == 1) {
                        // Le livre est disponible; proc√©der √† l'emprunt et l'ajouter √† la table emprunt
                        checkReservationSql = "SELECT COUNT(*) FROM reservation WHERE id_livre = ? AND id_utilisateur = ? and (statut = 'En attente de confirmation' or statut ='En attente')";
                        checkReservationStatement = con.prepareStatement(checkReservationSql);
                        checkReservationStatement.setInt(1, id_livre);
                        checkReservationStatement.setInt(2, Login.utilisateur.getId_utilisateur());
                        reservationResult = checkReservationStatement.executeQuery();
                        
                        if (reservationResult.next() && reservationResult.getInt(1) == 1){
                            String empruntSql ="update reservation set statut = 'Confirm√©e' where id_livre = ? and id_utilisateur = ? and (statut ='En attente' or statut='En attente de confirmation')";
                            empruntStatement = con.prepareStatement(empruntSql);
                            empruntStatement.setInt(2, Login.utilisateur.getId_utilisateur());
                            empruntStatement.setInt(1, id_livre);
                            int rowsAffected = empruntStatement.executeUpdate();
                        };
                        
                        String empruntSql ="INSERT INTO Emprunt (id_utilisateur, id_livre, date_emprunt, date_retour, statut) VALUES (?, ?, NOW(), DATE_ADD(NOW(), INTERVAL 15 DAY), 'En cours')";
                        empruntStatement = con.prepareStatement(empruntSql);
                        empruntStatement.setInt(1, Login.utilisateur.getId_utilisateur());
                        empruntStatement.setInt(2, id_livre);
                        int rowsAffected = empruntStatement.executeUpdate();
                        empruntSql ="update livre set disponibilite = 0 where id_livre = ?";
                        empruntStatement = con.prepareStatement(empruntSql);
                        empruntStatement.setInt(1, id_livre);
                        int rowsAffected2 = empruntStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            // L'emprunt a √©t√© ajout√© avec succ√®s
                            JOptionPane.showMessageDialog(frame, "Emprunt ajout√© avec succ√®s.");
                        } else {
                            JOptionPane.showMessageDialog(frame, "√âchec de l'emprunt.");
                        }
                    } else {
                        // Le livre n'est pas disponible; informer l'utilisateur
                        JOptionPane.showMessageDialog(frame, "Le livre n'est pas disponible pour l'emprunt.");
                    }
                } else {
                    // Le livre n'est pas trouv√©; informer l'utilisateur ou traiter selon les besoins
                    JOptionPane.showMessageDialog(frame, "Livre non trouv√©.");
                }
            } else {
                // Le livre est r√©serv√©; informer l'utilisateur qu'il ne peut pas emprunter un livre r√©serv√©
                JOptionPane.showMessageDialog(frame, "Le livre est r√©serv√©. Vous ne pouvez pas emprunter un livre r√©serv√© par un autre utilisateur. Reconsultez ult√©rieurement.");
            }
        } else {
            // L'utilisateur a d√©j√† un emprunt en cours ou en retard; informer l'utilisateur
            JOptionPane.showMessageDialog(frame, "Vous avez d√©j√† un emprunt en cours ou en retard. Vous ne pouvez pas emprunter un autre livre avant de retourner celui en cours.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        // G√©rer l'exception de mani√®re appropri√©e (journalisation, lancer une exception, etc.)
    } finally {
        // Fermer les ressources dans l'ordre inverse de leur cr√©ation
        try {
            if (empruntResult != null) {
                empruntResult.close();
            }
            if (checkEmpruntStatement != null) {
                checkEmpruntStatement.close();
            }
            if (reservationResult != null) {
                reservationResult.close();
            }
            if (checkReservationStatement != null) {
                checkReservationStatement.close();
            }
            if (availabilityResult != null) {
                availabilityResult.close();
            }
            if (checkAvailabilityStatement != null) {
                checkAvailabilityStatement.close();
            }
            if (empruntStatement != null) {
                empruntStatement.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // G√©rer l'exception de mani√®re appropri√©e (journalisation, lancer une exception, etc.)
        }
    }
}


    final static String url = "jdbc:mysql://localhost:3306/javaproject";
    final static String user="root";
    final static String password="W@2915djkq#$$2";
    public static void Consulter_le_Catalogue(){
        Connection con = null;
        try{
            con = DriverManager.getConnection(url,user,password);
            Statement stmt = con.createStatement();
            ResultSet res = stmt.executeQuery("select * from Livre");
            int i=1;
            while(res.next()){

                System.out.println("***Livre "+i+"***");
                System.out.println(res.getString("titre"));
                System.out.println(res.getString("auteur"));
                System.out.println(res.getString("genre"));
                if(res.getInt("disponibilite")==1){
                    System.out.println("Disponible");
                }
                else{
                    System.out.println("Non Disponible");
                }
                ++i;
            }
        }
        catch(Exception e){
            System.out.println(e);
            }
        finally {
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    };

    public void reserver(int id_livre, Connection con) {
    PreparedStatement checkReservationStatement = null;
    ResultSet reservationResult = null;
    PreparedStatement checkAvailabilityStatement = null;
    ResultSet availabilityResult = null;
    PreparedStatement reservationStatement = null;
    JFrame frame = null;

    try {
        // V√©rifier la disponibilit√© du livre
        String checkAvailabilitySql = "SELECT disponibilite FROM livre WHERE id_livre = ?";
        checkAvailabilityStatement = con.prepareStatement(checkAvailabilitySql);
        checkAvailabilityStatement.setInt(1, id_livre);
        availabilityResult = checkAvailabilityStatement.executeQuery();

        if (availabilityResult.next()) {
            int disponibilite = availabilityResult.getInt("disponibilite");

            if (disponibilite == 1) {
                // Le livre est disponible; v√©rifier les r√©servations
                String checkReservationSql = "SELECT COUNT(*) FROM reservation WHERE id_livre = ? AND (statut = 'En attente' OR statut = 'En attente de confirmation')";
                checkReservationStatement = con.prepareStatement(checkReservationSql);
                checkReservationStatement.setInt(1, id_livre);
                reservationResult = checkReservationStatement.executeQuery();

                if (reservationResult.next() && reservationResult.getInt(1) > 0) {
                    // Le livre est d√©j√† r√©serv√©; informer l'utilisateur de consulter ult√©rieurement
                    JOptionPane.showMessageDialog(frame, "Le livre est d√©j√† r√©serv√©. Veuillez consulter ult√©rieurement.");
                } else {
                    JOptionPane.showMessageDialog(frame, "Le livre est disponible et n'est pas reserv√©. Vous pouvez l'emprunter directement.");
                }
            } else {
                // Le livre n'est pas disponible; v√©rifier les r√©servations
                String checkReservationSql = "SELECT COUNT(*) FROM reservation WHERE id_livre = ? AND (statut = 'En attente' OR statut = 'En attente de confirmation')";
                checkReservationStatement = con.prepareStatement(checkReservationSql);
                checkReservationStatement.setInt(1, id_livre);
                reservationResult = checkReservationStatement.executeQuery();
                if (reservationResult.next() && reservationResult.getInt(1) > 0){
                JOptionPane.showMessageDialog(frame, "Le livre n'est pas disponible et r√©serv√©. R√©consultez ult√©rieurement.");}
                else{
                String reservationSql = "INSERT INTO reservation (id_utilisateur, id_livre, date_reservation, statut) VALUES (?, ?, NOW(), 'En attente')";
                    reservationStatement = con.prepareStatement(reservationSql);
                    reservationStatement.setInt(1, Login.utilisateur.getId_utilisateur());
                    reservationStatement.setInt(2, id_livre);
                    int rowsAffected = reservationStatement.executeUpdate();
                    
                    if (rowsAffected > 0) {
                        // La r√©servation a √©t√© ajout√©e avec succ√®s
                        JOptionPane.showMessageDialog(frame, "R√©servation ajout√©e avec succ√®s. Nous allons vous informer par email lorsque le livre sera disponible.");
                    } else {
                        JOptionPane.showMessageDialog(frame, "√âchec de la r√©servation.");
                    }
                }
            }
           
        } else {
            // Le livre n'est pas trouv√©; informer l'utilisateur ou traiter selon les besoins
            JOptionPane.showMessageDialog(frame, "Livre non trouv√©.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        // G√©rer l'exception de mani√®re appropri√©e (journalisation, lancer une exception, etc.)
    } finally {
        // Fermer les ressources dans l'ordre inverse de leur cr√©ation
        try {
            if (reservationResult != null) {
                reservationResult.close();
            }
            if (checkReservationStatement != null) {
                checkReservationStatement.close();
            }
            if (availabilityResult != null) {
                availabilityResult.close();
            }
            if (checkAvailabilityStatement != null) {
                checkAvailabilityStatement.close();
            }
            if (reservationStatement != null) {
                reservationStatement.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // G√©rer l'exception de mani√®re appropri√©e (journalisation, lancer une exception, etc.)
        }
    }
}



    public void rechercheLivre() {
        Scanner input = new Scanner(System.in);
        System.out.println("Rechercher avec le nom du livre ou bien le nom de l'auteur :");
        String rech = input.nextLine();
        input.close();

        Connection con = null;
        PreparedStatement stmt = null;
        ResultSet res = null;


        try {
            con = DriverManager.getConnection(url, user, password);

            // The SQL query to search for books based on the title
            stmt = con.prepareStatement("SELECT * FROM Livre WHERE (titre LIKE ? or auteur like ?)");

            // Set the value for the parameter
            stmt.setString(1, "%" + rech + "%");
            stmt.setString(2, "%" + rech + "%");

            // Execute the SQL query
            res = stmt.executeQuery();

            int i = 0;
            while (res.next()) {
                // Retrieve data from the result set
                String titre = res.getString("titre");
                String auteur = res.getString("auteur");
                String genre = res.getString("genre");
                int disponibilite = res.getInt("disponibilite");

                // Display or process the retrieved data as needed
                System.out.println("Titre: " + titre);
                System.out.println("Auteur: " + auteur);
                System.out.println("Genre: " + genre);
                System.out.println("Disponibilit√©: " + disponibilite);
                System.out.println("-------------");
                i += 1;
            }

            if (i == 0) {
                System.out.println("Livre introuvable");
            }
        } catch (SQLException e) {
            System.out.println(e);
        } finally {
            // Close resources in the finally block
            try {
                if (res != null) {
                    res.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    
    public void annulerReservation(int id_livre){
        PreparedStatement annulationStatement = null;
        Connection con = null;
        JFrame frame = null;
        try {
            con = DriverManager.getConnection(sauthentifier.url,sauthentifier.user,sauthentifier.password);
            
            String annulationSql = "UPDATE reservation SET statut = 'Annul√©e' WHERE id_livre = ? AND id_utilisateur = ? AND (statut = 'En attente' or statut ='En attente de confirmation')";
            annulationStatement = con.prepareStatement(annulationSql);
            annulationStatement.setInt(1, id_livre);
            annulationStatement.setInt(2, Login.utilisateur.getId_utilisateur());
            int rowsAffected = annulationStatement.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(frame,"R√©servation annul√©e avec succ√®s.");
            } else {
                JOptionPane.showMessageDialog(frame,"Aucune r√©servation en cours trouv√©e pour ce livre et cet utilisateur. Pri√®re de v√©rifiez les donn√©es.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately (logging, throwing, etc.)
        } finally {
            // Close the resources after usage
            try {
                if (annulationStatement != null) {
                    annulationStatement.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                // Handle the exception appropriately (logging, throwing, etc.)
            }
        }
    }
    
    public void retourner_livre(int id_livre, Connection con) {
        PreparedStatement retourStatement = null;
        JFrame frame = null;
        try {
            // The 'con' parameter is passed, so there's no need to create a new connection here
            String retourSql = "UPDATE Emprunt SET statut = 'Termin√©' WHERE id_livre = ? AND id_utilisateur = ? AND statut in ('En cours','En retard')";
            retourStatement = con.prepareStatement(retourSql);
            retourStatement.setInt(1, id_livre);
            retourStatement.setInt(2, Login.utilisateur.getId_utilisateur());
            int rowsAffected = retourStatement.executeUpdate();

            if (rowsAffected > 0) {
                // Call the method to update book disponibilite
                updateBookDisponibilite(id_livre, con);

                // Call the method to notify the user with the earliest reservation
                retournerPrioritaire(id_livre, frame, con);

                JOptionPane.showMessageDialog(frame, "Livre retourn√© avec succ√®s.");
            } else {
                JOptionPane.showMessageDialog(frame, "Vous n'avez aucune emprunt en cours pour ce livre. Veuillez v√©rifier les donn√©es.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately (logging, throwing, etc.)
        } finally {
            // Close the 'retourStatement' only; 'con' is passed as a parameter
            try {
                if (retourStatement != null) {
                    retourStatement.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                // Handle the exception appropriately (logging, throwing, etc.)
            }
        }
    }

    private void updateBookDisponibilite(int id_livre, Connection con) {
    JFrame frame = null;
    PreparedStatement checkReservationStatement = null;
    ResultSet reservationResult = null;
    PreparedStatement updateDisponibiliteStatement = null;

    try {
            String updateDisponibiliteSql = "UPDATE livre SET disponibilite = 1 WHERE id_livre = ?";
            updateDisponibiliteStatement = con.prepareStatement(updateDisponibiliteSql);
            updateDisponibiliteStatement.setInt(1, id_livre);
            int disponibiliteUpdated = updateDisponibiliteStatement.executeUpdate();

            if (disponibiliteUpdated <= 0) {
                // Handle the case where the disponibilite update fails
                JOptionPane.showMessageDialog(frame, "Impossible de mettre √† jour la disponibilit√© du livre avec l'identifiant " + id_livre);
            }
        } 
     catch (SQLException e) {
        e.printStackTrace();
        // Handle the exception appropriately (logging, throwing, etc.)
    }} 
    



    private void retournerPrioritaire(int id_livre, JFrame frame, Connection con) {
    PreparedStatement prioritaireStatement = null;

    try {
        String prioritaireSql = "SELECT utilisateur.id_utilisateur, utilisateur.login, utilisateur.nom, utilisateur.prenom, reservation.date_reservation, livre.titre AS nom_livre " +
                                "FROM reservation " +
                                "JOIN utilisateur ON reservation.id_utilisateur = utilisateur.id_utilisateur " +
                                "JOIN livre ON reservation.id_livre = livre.id_livre " +
                                "WHERE reservation.id_livre = ? " +
                                "ORDER BY reservation.date_reservation ASC " +
                                "LIMIT 1";
        prioritaireStatement = con.prepareStatement(prioritaireSql);
        prioritaireStatement.setInt(1, id_livre);
        ResultSet resultSet = prioritaireStatement.executeQuery();

        if (resultSet.next()) {
            int id_utilisateur = resultSet.getInt("id_utilisateur");
            String login = resultSet.getString("login");
            String nom = resultSet.getString("nom");
            String prenom = resultSet.getString("prenom");
            String nom_livre = resultSet.getString("nom_livre");
            String date_reservation = resultSet.getString("date_reservation");

            // Separate the UPDATE statement from the try-catch block
            PreparedStatement updateDisponibiliteStatement = null;
            try {
                String updateDisponibiliteSql = "UPDATE reservation SET statut = 'En attente de confirmation' WHERE id_livre = ? and id_utilisateur=? and statut='En attente'";
                updateDisponibiliteStatement = con.prepareStatement(updateDisponibiliteSql);
                updateDisponibiliteStatement.setInt(1, id_livre);
                updateDisponibiliteStatement.setInt(2, id_utilisateur);
                int disponibiliteUpdated = updateDisponibiliteStatement.executeUpdate();

                // Check if the update was successful before notifying
                if (disponibiliteUpdated > 0) {
                    // Call the method to notify the user with the earliest reservation
                    notifier_reserveur(login, nom, prenom, nom_livre, date_reservation);
                }
            } catch (SQLException e) {
                e.printStackTrace();
                // Handle the exception appropriately (logging, throwing, etc.)
            } finally {
                try {
                    if (updateDisponibiliteStatement != null) {
                        updateDisponibiliteStatement.close();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    // Handle the exception appropriately (logging, throwing, etc.)
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        // Handle the exception appropriately (logging, throwing, etc.)
    } finally {
        // Close the 'prioritaireStatement' only
        try {
            if (prioritaireStatement != null) {
                prioritaireStatement.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately (logging, throwing, etc.)
        }
    }
}


    private void notifier_reserveur(String login, String nom, String prenom, String nom_livre, String date_reservation) {
        sendmail.notifier_reserveur( login,nom, prenom,nom_livre,date_reservation);
    }

    // ... existing code ...
    
    public void afficherHisoriqueEmpruntsReservations(){
        
    }
    
    

        ;
        public void reservation(){};
        public void display_historique(){};
}


/*import java.util.regex.Matcher;
import java.util.regex.Pattern;

class EmailValidator {

    public static void main(String[] args) {
        String[] emails = {
            "john.doe@fst-etudiant.utm.tn",
            "jane.smith@fst.utm.tn",
            "invalid.email@gmail.com"
        };

        for (String email : emails) {
            if (estAdresseEmailUniversitaireValide(email)) {
                System.out.println(email + " est une adresse e-mail universitaire valide.");
            } else {
                System.out.println(email + " n'est pas une adresse e-mail universitaire valide.");
            }
        }
    }

    public static boolean estAdresseEmailUniversitaireValide(String email) {
        // Utilisation d'une expression r√©guli√®re pour valider l'adresse e-mail
        String regex = "^[a-zA-Z0-9._%+-]+@(fst-etudiant\\.utm\\.tn|fst\\.utm\\.tn)$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(email);

        // Retourne vrai si l'adresse e-mail correspond √† la regex
        return matcher.matches();
    }
}*/





